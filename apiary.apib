FORMAT: 1A

# tardis-api
API for [tardis](http://github.com/kiplic/tardis). Built with express, redis, and mongo.

## Users Collection [/users]
### List all Users [GET]

+ Response 200 (application/json)

        [{
            "id": "dgm3df", "name": "Dan Miller"
        }, {
            "id": "hwc2d", "name": "Hunter Cassidy"
        }]
        
### Create a User [POST]

+ Request (application/json)

        { "id": "dgm3df", "name": "Dan Miller" }
        
+ Response 201 (application/json)

        { "id": "dgm3df", "name": "Dan Miller" }
        
## User [/users/{id}]
+ Parameters
    + id (required, string, `dgm3df`) ... Unique string `id` of the User to perform action with. Has example value.

### Retrieve a User [GET]

+ Response 200 (application/json)

        { "id": "dgm3df", "name": "Dan Miller" }

### Update a User [PUT]

+ Request (application/json)

        { "id": "dgm3df", "name": "Dan Miller" }
        
+ Response 204

### Delete a User [DELETE]

+ Response 204

## Courses Collection [/courses]
### List all Courses [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "dept": "CS", num: "1110", "description": "Introduction to Programming"
        }, {
          "id": 2, "dept": "CS", num: "2110", "description": "Software Development Methods"
        }]

### Create a Course [POST]
+ Request (application/json)

        { "name": "CS 1110", "description": "Introduction to Programming" }

+ Response 201 (application/json)

        { "id": 1, "dept": "CS", num: "1110", "description": "Introduction to Programming" }

## Course [/courses/{id}]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Course to perform action with. Has example value.

### Retrieve a Course [GET]
+ Response 200 (application/json)

        { "id": 1, "dept": "CS", num: "1110", "description": "Introduction to Programming" }

### Update a Course [PUT]
+ Request (application/json)

        { "id": 1, "dept": "CS", num: "1110", "description": "Introduction to Programming" }

+ Response 204

### Remove a Course [DELETE]
+ Response 204


## Queues by Course Collection [/courses/{id}/queues]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Course to perform action with. Has example value.
    

### List all Queues by Course [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "course_id": 1, "description": "Wednesday Night Office Hours"
        }, {
          "id": 2, "course_id": 1, "description": "Thursday Night Office Hours"
        }]
        
### Create a Queue for a Course [POST]
+ Request (application/json)

        { "name": "Wednesday Night Office Hours" }

+ Response 201 (application/json)

        { "id" : "1", "name": "Wednesday Night Office Hours" }
        
## Queues Collection [/queues]

### List all Queues [GET]

+ Response 200 (application/json)

        [{ 
            "id" : "1", "name": "Wednesday Night Office Hours"
        }, {
            "id" : "2", "name": "Thursday Night Office Hours"
        }]
        
## Queue [/queue/{id}]
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Queue to perform action with. Has example value.

### Retrieve a Queue [GET]

+ Response 200 (application/json)

        { "id" : "1", "name": "Wednesday Night Office Hours" }

### Update a queue [PATCH]

+ Request (application/json)

        { "op" : "pop" } or
        { "op" : "push", "id" : "dgm3df" } or
        { "op" : "remove", "id" : "dgm3df" } or

+ Response 204

### Delete a queue [DELETE]

+ Response 204